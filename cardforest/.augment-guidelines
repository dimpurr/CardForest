!!重要!! 
- ！！执行任何命令前，必须先阅读 gpt/memo.md ！！并严格按照其中要求执行，如果参考文件包含 working_memory_[user].md 也要先！！阅读和修改 working_memory 文件！！记录当前工作，阅读完这俩再开始其他的思考和回答。但是，如果确实没有 at working memory 文件，则不需要阅读和修改 working memory 文件，直接开始其他的思考和回答，但是 project_memo 每次都必须阅读。
- 下一行是你要先输出的提示语，以表示你遵守了 memo 和 memory 规则，其中 [] 都按实际情况决定输出，多个 / 只输出符合情况的那一个，且不输出外围的[]符号，例如：`即将重新阅读memo，本次操作按照 project_memo 要求执行。这是似乎是一个需要多个步骤的长期任务，您是否忘记 @ working memory 文件？`这只是示例，按照上一行提供的选项根据当前实际情况决定如何输出！
- 这是输出规则，！！在你的回答最前面先按实际情况输出！！：`[即将重新阅读memo/memo内容仍完整在记忆中]，本次操作按照 project_memo 要求执行。[这个任务是短期任务，不会被记录进 working memory。/这是似乎是一个需要多个步骤的长期任务，您是否忘记 @ working memory 文件？/发现一个参考的 working memory 文件，当前任务进度将会被记录和更新。]`
- ！！必须遵循 git commit 提交信息格式！！优先使用英文，专业术语或者模块或者文件名或者保留字保持原来的英文
```
<类型>(<范围>): <非常有区分性和代表性但是不过长的描述>
- 改动1
- 改动2
...（1-4点）
```
- 类型包括✨feat/🐛fix/📚docs/💄style/♻️refactor/⚡perf/✅test/🔧chore
- 我们的 auth 走 supabase ，有 github google email （所以我们就不需要自己管理对应 oauth key 了都存 supabase 了）， 但是 supabase 只是作为 auth ，auth以外的用户信息我们都自己存
- 记得正确的使用 jotai 和 atoms 进行各种状态管理，永远先思考当前组件的状态能不能尽可能放进 jotai