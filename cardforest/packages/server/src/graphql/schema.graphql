scalar Date
scalar JSON

type User {
  _key: ID!
  _id: ID!
  username: String!
  createdAt: Date!
  updatedAt: Date!
}

type FieldDefinition {
  name: String!
  type: String!
  required: Boolean
  default: JSON
  config: JSON
}

type FieldGroup {
  _inherit_from: String!
  fields: [FieldDefinition!]!
}

type Model {
  _key: ID!
  _id: ID!
  _rev: String
  name: String!
  inherits_from: [String!]!
  fields: [FieldGroup!]!
  system: Boolean!
  createdAt: String!
  updatedAt: String
  createdBy: String
}

type Card {
  _key: ID!
  _id: ID!
  modelId: ID!
  model: Model 
  title: String!
  content: String
  body: String
  meta: JSON!
  createdAt: Date!
  updatedAt: Date!
  createdBy: User!
}

type CardWithRelations {
  card: Card!
  children: [Card!]!
}

type AuthResponse {
  token: String!
  user: User!
}

input FieldDefinitionInput {
  name: String!
  type: String!
  required: Boolean
  default: JSON
  config: JSON
}

input FieldGroupInput {
  _inherit_from: String!
  fields: [FieldDefinitionInput!]!
}

input CreateModelInput {
  name: String!
  inherits_from: [String!]
  fields: [FieldGroupInput!]!
}

input UpdateModelInput {
  name: String
  inherits_from: [String!]
  fields: [FieldGroupInput!]
}

input CreateCardInput {
  modelId: ID!
  title: String!
  content: String
  body: String
  meta: JSON
}

input UpdateCardInput {
  title: String
  content: String
  body: String
  meta: JSON
}

type Query {
  # User related
  me: User

  # Model related
  model(id: ID!): Model
  models: [Model!]!
  flattenedModel(id: ID!): Model

  # Card related
  card(id: ID!): Card
  cards: [Card!]!
  myCards: [Card!]!
  cardsWithRelations: [CardWithRelations!]!
}

type Mutation {
  # Auth related
  login(username: String!, password: String!): AuthResponse!
  register(username: String!, password: String!): User!

  # Model related
  createModel(input: CreateModelInput!): Model!
  updateModel(id: ID!, input: UpdateModelInput!): Model!
  deleteModel(id: ID!): Boolean!

  # Card related
  createCard(input: CreateCardInput!): Card!
  updateCard(id: ID!, input: UpdateCardInput!): Card!
  deleteCard(id: ID!): Boolean!
  createCardRelation(fromCardId: ID!, toCardId: ID!): Boolean!
}
